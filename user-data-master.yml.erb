#cloud-config

coreos:
  etcd2:
    #generate a new token for each unique cluster from https://discovery.etcd.io/new
    discovery: <%= $discovery_token_url %>
    # multi-region and multi-cloud deployments need to use $public_ipv4
    name: <%= vm_name %>
    #initial-cluster: default=https://$public_ipv4:2380,default=https://<%= vm_name %>:2380
    advertise-client-urls: https://$public_ipv4:2379,https://<%= vm_name %>:2379
    initial-advertise-peer-urls: https://$private_ipv4:2380,https://<%= vm_name %>:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: https://0.0.0.0:2379,https://0.0.0.0:4001
    listen-peer-urls: https://$private_ipv4:2380,https://$private_ipv4:7001
  fleet:
    public-ip: $public_ipv4
    etcd_servers: https://<%= vm_name %>:2379
    etcd_cafile: /etc/ssl/etcd/certs/ca.pem
    etcd_certfile: /etc/ssl/etcd/certs/client/client.pem
    etcd_keyfile: /etc/ssl/etcd/certs/client/client-key.pem
<% if $flannel_enabled %>
  flannel:
    interface: $public_ipv4
    etcd_endpoints: https://<%= vm_name %>:2379
    etcd_cafile: /etc/ssl/etcd/certs/ca.pem
    etcd_certfile: /etc/ssl/etcd/certs/client/client.pem
    etcd_keyfile: /etc/ssl/etcd/certs/client/client-key.pem
<% end %>
  units:
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
<% if $flannel_enabled %>

    - name: flanneld.service
      drop-ins:
      - name: 50-network-config.conf
        content: |
          [Service]
          Environment=ETCDCTL_CA_FILE=/etc/ssl/etcd/certs/ca.pem
          Environment=ETCDCTL_CERT_FILE=/etc/ssl/etcd/certs/client/client.pem
          Environment=ETCDCTL_KEY_FILE=/etc/ssl/etcd/certs/client/client-key.pem
          Environment=ETCDCTL_ENDPOINT=https://<%= vm_name %>:2379
          ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "10.1.0.0/16" }'
      command: start
<% end %>

    - name: docker.service
      command: start
      enabled: true
      content: |
        [Unit]
        Description=Docker Application Container Engine
        Documentation=http://docs.docker.com
        After=docker.socket network.target
        Requires=docker.socket

        [Service]
        Environment="DOCKER_CGROUPS=--exec-opt native.cgroupdriver=systemd"
        MountFlags=slave
        LimitNOFILE=1048576
        LimitNPROC=1048576
        ExecStart=/usr/lib/coreos/dockerd daemon --host=fd:// $DOCKER_OPTS $DOCKER_CGROUPS

        [Install]
        WantedBy=multi-user.target


    - name: docker-swarm-manage.service
      command: start
      enabled: true
      content: |
        [Unit]
        Description=Docker Swarm Manager
        Documentation=http://docs.docker.com/swarm
        After=docker.service
        Requires=docker.service

        [Service]
        Environment="SWARM_RUN_OPTS=-v /etc/ssl/etcd/certs/:/etc/ssl/etcd/certs/ -v /var/run/docker.socket:/var/run/docker.socket --net=host"
        Environment="SWARM_ETCD_CERT_OPTS=--discovery-opt kv.cacertfile=/etc/ssl/etcd/certs/ca.pem --discovery-opt kv.certfile=/etc/ssl/etcd/certs/client/client.pem --discovery-opt kv.keyfile=/etc/ssl/etcd/certs/client/client-key.pem"
        Environment="SWARM_ETCD_HOST=etcd://<%= vm_name %>:2379"
        ExecStart=/usr/bin/docker run $SWARM_RUN_OPTS swarm manage $SWARM_ETCD_CERT_OPTS $SWARM_ETCD_HOST

        [Install]
        WantedBy=multi-user.target


    - name: docker-swarm-join.service
      command: start
      enabled: true
      content: |
        [Unit]
        Description=Docker Swarm Join
        Documentation=http://docs.docker.com/swarm
        After=docker.service
        Requires=docker.service

        [Service]
        Environment="SWARM_RUN_OPTS=-v /etc/ssl/etcd/certs/:/etc/ssl/etcd/certs/ --net=host"
        Environment="SWARM_JOIN_OPTS=--advertise=$private_ipv4:2400"
        Environment="SWARM_ETCD_CERT_OPTS=--discovery-opt kv.cacertfile=/etc/ssl/etcd/certs/ca.pem --discovery-opt kv.certfile=/etc/ssl/etcd/certs/client/client.pem --discovery-opt kv.keyfile=/etc/ssl/etcd/certs/client/client-key.pem"
        Environment="SWARM_ETCD_HOST=etcd://<%= vm_name %>:2379"
        ExecStart=/usr/bin/docker run $SWARM_RUN_OPTS swarm join $SWARM_JOIN_OPTS $SWARM_ETCD_CERT_OPTS $SWARM_ETCD_HOST

        [Install]
        WantedBy=multi-user.target

write_files:
  - path: /run/systemd/system/etcd2.service.d/30-certificates.conf
    permissions: 0644
    content: |
      [Service]
      # Client Env Vars
      Environment=ETCD_CA_FILE=/etc/ssl/etcd/certs/ca.pem

      Environment=ETCD_CERT_FILE=/etc/ssl/etcd/certs/private/<%= vm_name %>.pem
      Environment=ETCD_KEY_FILE=/etc/ssl/etcd/certs/private/<%= vm_name %>-key.pem
      Environment=ETCD_CLIENT_CERT_AUTH=true

      # Peer Env Vars
      Environment=ETCD_PEER_CA_FILE=/etc/ssl/etcd/certs/ca.pem

      Environment=ETCD_PEER_CERT_FILE=/etc/ssl/etcd/certs/private/server.pem
      Environment=ETCD_PEER_KEY_FILE=/etc/ssl/etcd/certs/private/server-key.pem
      Environment=ETCD_PEER_CLIENT_CERT_AUTH=true

  - path: /etc/profile.d/default.sh
    permissions: 0644
    owner: core
    content: |
      export DOCKER_HOST=localhost:2375
      # configure etcdctl to work with our etcd servers set above
      export ETCDCTL_CA_FILE=/etc/ssl/etcd/certs/ca.pem

      export ETCDCTL_CERT_FILE=/etc/ssl/etcd/certs/client/client.pem
      export ETCDCTL_KEY_FILE=/etc/ssl/etcd/certs/client/client-key.pem
      export ETCDCTL_ENDPOINT=https://<%= vm_name %>:2379
